---
title: Homework 7 - Creating a resume database
author: Samuel Lyons
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This is homework 7, it gives me practice building a database that represents a company-wide resume of collective skils and certifications. By following the instructions and taking my knowelede from the lecture I will write queries after I build the database to answer those questions provided.

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-samuellee108>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

The project represents my company-wide resume capturing the collective skills and certifications of all the people in my company. The database will capture skills, employees and their roles within my company.  This will help my sensei find employees with specific skills, list the skills of any employee and help find gaps in the skill sets of employees in specific roles. This database contains the following schema

skills( id,name, description, tag, url, time_commitment)
people( id,first_name, last_name, email, linkedin_url, headshot_url, discord_handle, brief_bio, date_joined)
peopleskills( id, skills_id, people_id, date_acquired )
roles( id, name, sort_priority)
people_roles( id, people_id, role_id, date_role_acquired )



## Crows-foot diagram

This is a Crow's Foot Diagram of my database

```{mermaid}
%%| echo: false
erDiagram
    peopleroles }|--|| people : x
    peopleroles }|--|| roles : x
    peopleskills }|--|| skills : x
    peopleskills }|--|| people : x
    
    
    
    people{
        primary_key id
        varchar first_name
        varchar last_name
        varchar email
        varchar linkedin_url
        varchar headshot_url
        varchar discord_handle
        varchar brief_bio
        int date_joined
    }
    roles {
        primary_key id
        varchar name
        int sort_priority
    }

    skills {
        primary_key id
        varchar name
        varchar description
        varchar tag
        varchar url 
        varchar time_commitment

    }

    peopleroles {
        primary_key id
        foreign_key people_id
        foreign_key role_id
        int date_assigned
    }

    peopleskills {
        primary_key id
        foreign_key skils_id
        foreign_key people_id
        int date_acquired
    }
```

## Examples of data in the database


### People table

The *people* table contains the Persons ID, First name, last name, email, linkedin url, headshot url, and discord handle.

Below is a list of data in the *people* table:

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains Skill's ID, name, description, tag, url, and time commitment

Below is a list of data in the *skills* table:

```{python}
#| echo: false
#| eval: true

sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains Role's ID, name, and sorting priority

Below is a list of data in the *roles* table.l

```{python}
#| echo: false
#| eval: true

sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

here a query that answers the statement above:

```{python}
sql = f"""
SELECT 
    name, 
    tag, 
    description 
FROM 
    skills
ORDER BY
    name;
"""
```


and here is a sample result from the query

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT 
    first_name,
    last_name,
    email 
FROM 
    people
ORDER BY 
    length(last_name);
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List skill names of Person 1

```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT 
    name
FROM 
    peopleskills ps
INNER JOIN skills s ON (ps.skills_id=s.id)
WHERE
    people_id = 1;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names with Skill 6

```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT 
    first_name,
    last_name
FROM 
    peopleskills ps
INNER JOIN people p ON (ps.people_id=p.id)
WHERE
    skills_id=6;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role

```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT 
    first_name,
    last_name
FROM 
    peopleroles pr
INNER JOIN people p ON (pr.people_id=p.id)
INNER JOIN roles r ON (pr.role_id=r.id)
WHERE
    name='Developer'
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills

```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT 
    first_name,
    last_name,
    email
FROM 
    people p
LEFT JOIN peopleskills ps ON (p.id=ps.people_id)
WHERE skills_id IS NULL
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills

```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT 
    name,
    tag
FROM 
    skills s
LEFT JOIN peopleskills ps ON (s.id=ps.skills_id)
WHERE people_id IS NULL
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role

```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT 
    p.first_name,
    p.last_name,
    s.name
FROM 
    peopleskills ps
INNER JOIN peopleroles pr ON (ps.people_id=pr.people_id)
INNER JOIN roles r ON (pr.role_id=r.id)
INNER JOIN skills s ON (ps.skills_id= s.id)
INNER JOIN people p ON (ps.people_id=p.id)
WHERE r.name = 'Boss';
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List ids and names of unused roles

```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT 
    r.id,
    name
FROM 
    roles r
LEFT JOIN peopleroles pr ON (r.id=pr.role_id)
WHERE role_id IS NULL;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

When Completing this homework assignment I learned alot, I many caught up of lectures first before I jumped in and that helped me greatly. I feel like obtaining the correct knowledge made the homework assignment much easier than otherwise. It took some thought to write the quries but other than that it was simple but tedious, and I'd rather it be that way than difficult and tedious. Thanks for a great homework!

